{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,CCGA,IADI,EACA,EAAQ,EAIN,EAAW,SAAS,aAAa,CAAC,UAClC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAa,SAAS,aAAa,CAAC,YACpC,EAAW,SAAS,aAAa,CAAC,UAClC,EAAgB,SAAS,aAAa,CAAC,mBAEzC,EAAY,aAAa,OAAO,CAAC,mBAAqB,EACpD,EAAgB,SAAS,aAAa,CAAC,eAiB7C,SAAS,IACP,IACA,IACA,EAAS,SAAS,CAAC,MAAM,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,SAAS,aAAa,CAAC,kBAAkB,SAAS,CAAC,MAAM,CAAC,SAC5D,CAEA,SAAS,IAGP,AAFqB,SAAS,aAAa,CAAC,UAE/B,SAAS,CAAG,EAC3B,CAEA,SAAS,IACP,EAAQ,EACR,EAAU,SAAS,CAAG,CACxB,CA2BA,SAAS,EAAW,CAAI,CAAE,CAAG,EAC3B,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG,GACvB,EAAK,SAAS,CAAC,GAAG,CAAC,QAEf,EAAM,IACR,EAAK,SAAS,CAAG,EAAI,QAAQ,GAEzB,GAAO,KACT,EAAK,SAAS,CAAC,GAAG,CAAC,SAAW,EAAI,QAAQ,IAE1C,EAAK,SAAS,CAAC,GAAG,CAAC,eAGvB,AA2OF,WACE,IAAK,IAAI,EAAI,EAAG,EAlUL,EAkUe,IACxB,IAAK,IAAI,EAAI,EAAG,EAlUJ,EAkUiB,IAC3B,GAAI,AAAgB,OAAhB,CAAK,CAAC,EAAE,CAAC,EAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar board;\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar startBtn = document.querySelector(\".start\");\nvar scoreItem = document.querySelector(\".game-score\");\nvar restartBtn = document.querySelector(\".restart\");\nvar againBtn = document.querySelector(\".again\");\nvar containerLose = document.querySelector(\".container-lose\");\nvar bestScore = localStorage.getItem(\"2048-highScore\") || 0;\nvar bestScoreElem = document.querySelector(\".best-score\");\nbestScoreElem.textContent = bestScore;\nstartBtn.addEventListener(\"click\", startGame);\nrestartBtn.addEventListener(\"click\", restartGame);\nagainBtn.addEventListener(\"click\", restartGame);\nfunction startGame() {\n    clearBoard();\n    resetScore();\n    setGame();\n    startBtn.classList.add(\"hidden\");\n    restartBtn.classList.remove(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n}\nfunction restartGame() {\n    clearBoard();\n    resetScore();\n    startBtn.classList.remove(\"hidden\");\n    restartBtn.classList.add(\"hidden\");\n    containerLose.classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.remove(\"hidden\");\n}\nfunction clearBoard() {\n    var boardElement = document.querySelector(\".board\");\n    boardElement.innerHTML = \"\";\n}\nfunction resetScore() {\n    score = 0;\n    scoreItem.innerText = score;\n}\nfunction setGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var tile = document.createElement(\"div\");\n        tile.id = r.toString() + \"-\" + c.toString();\n        var num = board[r][c];\n        updateTile(tile, num);\n        document.querySelector(\".board\").append(tile);\n    }\n    setNew();\n    setNew();\n}\nfunction updateTile(tile, num) {\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"tile\");\n    if (num > 0) {\n        tile.innerText = num.toString();\n        if (num <= 2048) tile.classList.add(\"tile--\" + num.toString());\n        else tile.classList.add(\"tile--2048\");\n    }\n    checkForWin();\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    var boardChanged = false;\n    switch(e.code){\n        case \"ArrowLeft\":\n            boardChanged = slideLeft();\n            break;\n        case \"ArrowRight\":\n            boardChanged = slideRight();\n            break;\n        case \"ArrowUp\":\n            boardChanged = slideUp();\n            break;\n        case \"ArrowDown\":\n            boardChanged = slideDown();\n            break;\n    }\n    if (boardChanged) {\n        setNew();\n        scoreItem.innerText = score;\n        if (score > bestScore) {\n            bestScore = score;\n            bestScoreElem.textContent = bestScore;\n            localStorage.setItem(\"2048-bestScore\", bestScore);\n        }\n    }\n});\nfunction filterZero(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction slide(originalRow) {\n    var row = _to_consumable_array(originalRow);\n    row = filterZero(row);\n    for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        score += row[i];\n    }\n    row = filterZero(row);\n    while(row.length < columns)row.push(0);\n    return row;\n}\nfunction slideLeft() {\n    var _loop = function(r) {\n        var row = board[r];\n        var originalRow = _to_consumable_array(row);\n        row = slide(row);\n        board[r] = row;\n        if (!boardChanged && !originalRow.every(function(val, index) {\n            return val === row[index];\n        })) boardChanged = true;\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    };\n    var boardChanged = false;\n    for(var r = 0; r < rows; r++)_loop(r);\n    return boardChanged;\n}\nfunction slideRight() {\n    var _loop = function(r) {\n        var row = board[r];\n        var originalRow = _to_consumable_array(row);\n        row.reverse();\n        row = slide(row);\n        board[r] = row.reverse();\n        if (!boardChanged && !originalRow.every(function(val, index) {\n            return val === row[index];\n        })) boardChanged = true;\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    };\n    var boardChanged = false;\n    for(var r = 0; r < rows; r++)_loop(r);\n    return boardChanged;\n}\nfunction slideUp() {\n    var _loop = function(c) {\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var originalRow = _to_consumable_array(row);\n        row = slide(row);\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n        if (!boardChanged && !originalRow.every(function(val, index) {\n            return val === row[index];\n        })) boardChanged = true;\n    };\n    var boardChanged = false;\n    for(var c = 0; c < columns; c++)_loop(c);\n    return boardChanged;\n}\nfunction slideDown() {\n    var _loop = function(c) {\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var originalRow = _to_consumable_array(row);\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n        if (!boardChanged && !originalRow.every(function(val, index) {\n            return val === row[index];\n        })) boardChanged = true;\n    };\n    var boardChanged = false;\n    for(var c = 0; c < columns; c++)_loop(c);\n    return boardChanged;\n}\nfunction setNew() {\n    if (!hasEmptyTile()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            var randomNum = Math.floor(Math.random() * 10);\n            board[r][c] = randomNum === 0 ? 4 : 2;\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            tile.innerText = board[r][c];\n            tile.classList.add(\"tile--\" + board[r][c]);\n            found = true;\n        }\n    }\n    if (isGameOver()) containerLose.classList.remove(\"hidden\");\n}\nfunction hasEmptyTile() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction isGameOver() {\n    if (hasEmptyTile()) return false;\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns - 1; c++){\n        if (board[r][c] === board[r][c + 1]) return false;\n    }\n    for(var c1 = 0; c1 < columns; c1++)for(var r1 = 0; r1 < rows - 1; r1++){\n        if (board[r1][c1] === board[r1 + 1][c1]) return false;\n    }\n    return true;\n}\nfunction checkForWin() {\n    for(var r = 0; r < rows; r++){\n        for(var c = 0; c < columns; c++)if (board[r][c] === 2048) {\n            document.querySelector(\".message-win\").classList.remove(\"hidden\");\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.ffe43dc0.js.map\n","'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\n\nconst startBtn = document.querySelector('.start');\nconst scoreItem = document.querySelector('.game-score');\nconst restartBtn = document.querySelector('.restart');\nconst againBtn = document.querySelector('.again');\nconst containerLose = document.querySelector('.container-lose');\n\nlet bestScore = localStorage.getItem('2048-highScore') || 0;\nconst bestScoreElem = document.querySelector('.best-score');\n\nbestScoreElem.textContent = bestScore;\n\nstartBtn.addEventListener('click', startGame);\nrestartBtn.addEventListener('click', restartGame);\nagainBtn.addEventListener('click', restartGame);\n\nfunction startGame() {\n  clearBoard();\n  resetScore();\n  setGame();\n  startBtn.classList.add('hidden');\n  restartBtn.classList.remove('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n}\n\nfunction restartGame() {\n  clearBoard();\n  resetScore();\n  startBtn.classList.remove('hidden');\n  restartBtn.classList.add('hidden');\n  containerLose.classList.add('hidden');\n  document.querySelector('.message-start').classList.remove('hidden');\n}\n\nfunction clearBoard() {\n  const boardElement = document.querySelector('.board');\n\n  boardElement.innerHTML = '';\n}\n\nfunction resetScore() {\n  score = 0;\n  scoreItem.innerText = score;\n}\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.createElement('div');\n\n      tile.id = r.toString() + '-' + c.toString();\n\n      const num = board[r][c];\n\n      updateTile(tile, num);\n      document.querySelector('.board').append(tile);\n    }\n  }\n\n  setNew();\n  setNew();\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('tile');\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n\n    if (num <= 2048) {\n      tile.classList.add('tile--' + num.toString());\n    } else {\n      tile.classList.add('tile--2048');\n    }\n  }\n  checkForWin();\n}\n\ndocument.addEventListener('keyup', (e) => {\n  let boardChanged = false;\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      boardChanged = slideLeft();\n      break;\n    case 'ArrowRight':\n      boardChanged = slideRight();\n      break;\n    case 'ArrowUp':\n      boardChanged = slideUp();\n      break;\n    case 'ArrowDown':\n      boardChanged = slideDown();\n      break;\n  }\n\n  if (boardChanged) {\n    setNew();\n    scoreItem.innerText = score;\n\n    if (score > bestScore) {\n      bestScore = score;\n      bestScoreElem.textContent = bestScore;\n      localStorage.setItem('2048-bestScore', bestScore);\n    }\n  }\n});\n\nfunction filterZero(row) {\n  return row.filter((num) => num !== 0);\n}\n\nfunction slide(originalRow) {\n  let row = [...originalRow];\n\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  let boardChanged = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row = slide(row);\n    board[r] = row;\n\n    if (!boardChanged\n      && !originalRow.every((val, index) => val === row[index])) {\n      boardChanged = true;\n    }\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  return boardChanged;\n}\n\nfunction slideRight() {\n  let boardChanged = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row.reverse();\n    row = slide(row);\n    board[r] = row.reverse();\n\n    if (\n      !boardChanged\n      && !originalRow.every((val, index) => val === row[index])\n    ) {\n      boardChanged = true;\n    }\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  return boardChanged;\n}\n\nfunction slideUp() {\n  let boardChanged = false;\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n\n    if (!boardChanged\n      && !originalRow.every((val, index) => val === row[index])) {\n      boardChanged = true;\n    }\n  }\n\n  return boardChanged;\n}\n\nfunction slideDown() {\n  let boardChanged = false;\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n\n    if (!boardChanged\n      && !originalRow.every((val, index) => val === row[index])) {\n      boardChanged = true;\n    }\n  }\n\n  return boardChanged;\n}\n\nfunction setNew() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const randomNum = Math.floor(Math.random() * 10);\n\n      board[r][c] = randomNum === 0 ? 4 : 2;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = board[r][c];\n      tile.classList.add('tile--' + board[r][c]);\n      found = true;\n    }\n  }\n\n  if (isGameOver()) {\n    containerLose.classList.remove('hidden');\n  }\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isGameOver() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let c = 0; c < columns; c++) {\n    for (let r = 0; r < rows - 1; r++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction checkForWin() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        document.querySelector('.message-win').classList.remove('hidden');\n\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","score","startBtn","document","querySelector","scoreItem","restartBtn","againBtn","containerLose","bestScore","localStorage","getItem","bestScoreElem","restartGame","clearBoard","resetScore","classList","remove","add","boardElement","innerHTML","innerText","updateTile","tile","num","value","checkForWin","r","c","filterZero","row","filter","slide","originalRow","push","setNew","hasEmptyTile","found","Math","floor","random","randomNum","getElementById","isGameOver","columns","c1","r1","rows","textContent","addEventListener","setGame","createElement","id","append","e","boardChanged","code","slideLeft","_loop","every","val","index","slideRight","reverse","slideUp","slideDown","setItem"],"version":3,"file":"index.ffe43dc0.js.map"}